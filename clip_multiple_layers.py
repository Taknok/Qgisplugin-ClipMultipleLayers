# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ClipMultipleLayers
                                 A QGIS plugin
 Clip all displayed layers (rasters and vectors) with a polygon layer selected.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-10-30
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Pg
        email                : pg.developper.fr@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QFileDialog, QMessageBox, QProgressBar

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .clip_multiple_layers_dialog import ClipMultipleLayersDialog
import os.path
import errno

import tempfile

import processing, os, subprocess, time
from qgis.utils import *
from qgis.core import *
from qgis.gui import QgsMessageBar
# from qgis.PyQt.QtGui import QProgressBar
from qgis.PyQt.QtCore import *

from osgeo import gdal

FORMAT_NO_MULTI = ["ESRI Shapefile", "DXF"]

class ClipMultipleLayers:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            '{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = ClipMultipleLayersDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Clip Multiple Layers')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'ClipMultipleLayers')
        self.toolbar.setObjectName(u'ClipMultipleLayers')

        self.dlg.lineEditOutputFolder.clear()
        self.initFolder();
        self.dlg.pushButtonOutputFolder.clicked.connect(self.selectOutputFile);

        self.format_no_multi = FORMAT_NO_MULTI
        self.multi_support_error = []
        self.multi_support_error_processing = []
        self.progression = 0


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ClipMultipleLayers', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/clip_multiple_layers/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Clip all displayed layers'),
            callback=self.run,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Clip Multiple Layers'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar


    def initFolder(self):
        path_project = QgsProject.instance().fileName()
        path_project = path_project[:path_project.rfind("/"):]

        self.folderName = path_project

        self.dlg.lineEditOutputFolder.setText(self.folderName);

    def selectOutputFile(self):
        folderTmp = QFileDialog.getExistingDirectory(self.dlg,
            self.tr("Select output folder "), self.folderName)

        if folderTmp != "":
            self.folderName = folderTmp

        self.dlg.lineEditOutputFolder.setText(self.folderName);

    def isFileOpened(self, file_path):
        if os.path.exists(file_path):
            try:
                os.rename(file_path, file_path+"_")
                os.rename(file_path+"_", file_path)
                return False
            except OSError as e:
                return True

    def checkSingleGeomType(self, layer):
        """
        Check if the layer has at least one multi or only single geometry.
        """
        features = layer.getFeatures()
        for f in features:
            isSingle = QgsWkbTypes.isSingleType(f.geometry().wkbType())
            if isSingle is False:
                return False

        return True

    def _clipVector(self, layer, mask):
        output = os.path.join(self.folderName, "vectors", "clip_" + layer.name())

        index = self.dlg.comboBoxVectorFormat.currentIndex()
        vector_format_selected = self.dlg.comboBoxVectorFormat.itemData(index)

        # check file isn't openned and is writable
        version = 0
        # QgsMessageLog.logMessage(output + "." + vector_format_selected.globs[0].split(".")[-1], level=Qgis.Critical)
        while self.isFileOpened(output + "." + vector_format_selected.globs[0].split(".")[-1]):
            output = self.folderName + "/vectors/clip_" + \
                layer.name() + "("+ str(version) + ")"
            version +=1

        # if a multipoint show error and skip to next iter
        # QgsMessageLog.logMessage(str((not self.checkSingleGeomType(layer)) and ( formvector_format_selectedat_selected.driverName in format_no_multi )), level=Qgis.Critical)
        if not self.checkSingleGeomType(layer) and ( vector_format_selected.driverName in self.format_no_multi ):
            self.multi_support_error.append(layer)
            # skip to next iter
            return

        result = processing.run("native:clip", {"INPUT" : layer.id(), "OVERLAY" : mask.id(), "OUTPUT" : "memory:"})

        # check if processing generate a multi type, this is a know bug of qgis 3.22
        if not self.checkSingleGeomType(result["OUTPUT"]) and ( vector_format_selected.driverName in self.format_no_multi ):
            self.multi_support_error_processing.append(layer)
            # skip to next iter
            return

        options = QgsVectorFileWriter.SaveVectorOptions()
        options.fileEncoding = layer.dataProvider().encoding()
        options.driverName = vector_format_selected.driverName
        options.fileEncoding = "UTF-8"

        error, error_msg, filename, _ = QgsVectorFileWriter.writeAsVectorFormatV3(
            layer = result["OUTPUT"],
            fileName = output,
            transformContext = QgsProject.instance().transformContext(),
            options = options,
        )

        if error != QgsVectorFileWriter.NoError:
            iface.messageBar().pushMessage(
                self.tr("Error"),
                self.tr(f"Cannot write file {output}"),
                level=Qgis.Critical)
            raise RuntimeError(error_msg)

        # save style
        if self.dlg.checkBoxSaveStyle.isChecked():
            qml_output = os.path.splitext(filename)[0] + ".qml"
            layer.saveNamedStyle(qml_output)
            
        # load layer
        if self.dlg.checkBoxLoadClippedLayers.isChecked():
            out = iface.addVectorLayer(filename, "", "ogr")
            if not out:
                iface.messageBar().pushMessage(self.tr("Error"),
                    self.tr("Could not load ") + output,
                    level=Qgis.Warning)

    def _convert2gdal(self, layer, mask):
        provider = layer.dataProvider()
        coordinateTransformContext = QgsProject.instance().transformContext()
        tr = QgsCoordinateTransform(mask.crs(), layer.crs(), QgsProject.instance())

        pipe = QgsRasterPipe()
        projector = QgsRasterProjector()
        projector.setCrs(provider.crs(), provider.crs(), coordinateTransformContext)

        if not pipe.set(provider.clone()):
            iface.messageBar().pushMessage(self.tr("Error"), self.tr("Cannot set pipe provider: ") + layer.name(), level=Qgis.Warning)


        if not pipe.insert(2, projector):
            iface.messageBar().pushMessage(self.tr("Error"), self.tr("Cannot set pipe projector: ") + layer.name(), level=Qgis.Warning)

        out_dir = tempfile.TemporaryDirectory()
        out_file = os.path.join(out_dir.name, "clipraster.tmp")
        file_writer = QgsRasterFileWriter(out_file)
        file_writer.Mode(0)

        extent = tr.transform(mask.extent())

        # QgsMessageLog.logMessage(">>>>>> . " + out_dir.name, level=Qgis.Critical)


        opts = ["COMPRESS=LZW"]
        file_writer.setCreateOptions(opts)
        error = file_writer.writeRaster(
            pipe,
            extent.width(),
            extent.height(),
            extent,
            layer.crs(),
            coordinateTransformContext,
        )


        if error == QgsRasterFileWriter.NoError:
            return QgsRasterLayer(out_file, layer.name()), out_dir
        else:
            iface.messageBar().pushMessage(self.tr("Error"), self.tr("Could save tmp raster: ") + layer.name(), level=Qgis.Warning)
            return None, None

    def _get_raster_extension(self, layer):
        dataset = gdal.Open(layer.dataProvider().dataSourceUri(), gdal.GA_ReadOnly)
        driverName = dataset.GetDriver().ShortName
        return QgsRasterFileWriter.extensionsForFormat(driverName)[0]

    def _clipRaster(self, layer, mask):
        tmpdir = None
        # Processing support only gdal provider, if not gdal, extract data to a gdal layer
        if layer.providerType() != "gdal":
            layer, tmpdir = self._convert2gdal(layer, mask)

        if layer is None:
            return

        # get extension about the raster
        filename = layer.name()
        file_extension = self._get_raster_extension(layer)


        output = os.path.join(self.folderName, "rasters", "clip_" + filename + "." + file_extension)
        
        # check file isn't openned and is writable
        version = 0
        while self.isFileOpened(output):
            output = os.path.join(self.folderName, "rasters", "clip_" + filename+ "("+ str(version) + ")." + file_extension)
            version +=1

        processing.run("gdal:cliprasterbymasklayer", {"INPUT" : layer, "MASK" : mask, "CROP_TO_CUTLINE" : True,  "OUTPUT" : output})

        # QgsMessageLog.logMessage(">>>>>> # " + str(tmpdir.name), level=Qgis.Critical)

        if tmpdir is not None:
            # remove reference to tmp file before erasing tmp folder
            del layer
            tmpdir.cleanup()

        # load layer
        if self.dlg.checkBoxLoadClippedLayers.isChecked():
            out = iface.addRasterLayer(output, "")
            if out is None or not out.isValid():
                iface.messageBar().pushMessage(self.tr("Error"), self.tr("Could not load ") +  output, level=Qgis.Warning)

    def _showPopupError(self, error_arr):
        text = f"{' & '.join(error_arr)} do not support multitype geometry. Please change output format or convert to singletype geometry.\n {[l.name() for l in multi_support_error]}"
        QMessageBox.warning(
            None,
            self.tr("Multi Type format error"),
            self.tr(text),
        )

    def _showBarError(self, error_arr):
        widget = iface.messageBar().createMessage("Skipped Layers", "Somes layers were not processed")
        button = QPushButton(widget)
        button.setText("More")
        button.pressed.connect(self._showPopupError(error_arr))
        widget.layout().addWidget(button)
        iface.messageBar().pushWidget(widget, Qgis.Warning)

    def showFilledMainWindow(self):
        # clear selection box
        self.dlg.comboBoxMaskLayer.clear()

        # get all layers to fill comboBoxMaskLayer
        layers = QgsProject.instance().mapLayers().values()
        # fill selection combo, only polygon layers
        n = 0
        for layer in layers:
            if layer.type() == QgsMapLayer.VectorLayer and \
               layer.geometryType() == QgsWkbTypes.PolygonGeometry:
                self.dlg.comboBoxMaskLayer.addItem(layer.name(), layer)
                n += 1

        # fill output format in comboBoxVectorFormat
        for vector_format in QgsVectorFileWriter.supportedFiltersAndFormats():
            self.dlg.comboBoxVectorFormat.addItem(vector_format.driverName, vector_format)

        if n == 0:  # no polygon layer
            iface.messageBar().pushMessage(self.tr("Warning"),
                self.tr("No polygon layer in actual project"),
                level=Qgis.Warning)
            return

        # show the dialog
        self.dlg.show()
        
        # Run the dialog event loop
        return self.dlg.exec_()

    def createOutputFolders(self):
        #search existence of output folder, if not create it
        if not os.path.isdir(self.folderName):
            raise FileNotFoundError(
                errno.ENOENT, os.strerror(errno.ENOENT), self.folderName)

        directory = os.path.join(self.folderName, "vectors")
        if not os.path.exists(directory) and self.dlg.checkVector.isChecked():
            os.makedirs(directory)
            
        directory = os.path.join(self.folderName, "rasters")
        if not os.path.exists(directory) and self.dlg.checkRaster.isChecked():
            os.makedirs(directory)

    def createProgressBar(self, checkedLayers):
        # Progress bar
        progressMessageBar = iface.messageBar().createMessage(self.tr("Clipping..."))
        self.progress = QProgressBar()
        self.progress.setMaximum(len(checkedLayers) - 1)
        self.progress.setAlignment(Qt.AlignLeft|Qt.AlignVCenter)
        progressMessageBar.layout().addWidget(self.progress)
        iface.messageBar().pushWidget(progressMessageBar, Qgis.Info)
        self.progression = 0

    def run(self):
        """Run method that performs all the real work"""

        # Run the dialog event loop
        result = self.showFilledMainWindow()

        # See if OK was pressed
        if result:
            dirName = self.dlg.lineEditOutputFolder.text().strip()
            if len(dirName) == 0:
                iface.messageBar().pushMessage(self.tr("Warning"),
                    self.tr("Please select target folder"), level=Qgis.Warning)
                return
            if not (self.dlg.checkVector.isChecked() or
                    self.dlg.checkRaster.isChecked()):
                iface.messageBar().pushMessage(self.tr("Warning"),
                    self.tr("Neither vector nor raster layers selected for clipping. Nothing to do. "),
                    level=Qgis.Warning)
                return

            index = self.dlg.comboBoxMaskLayer.currentIndex()
            selection = self.dlg.comboBoxMaskLayer.itemData(index)

            checkedLayers = QgsProject.instance().layerTreeRoot().checkedLayers()

            self.createOutputFolders()

            self.createProgressBar(checkedLayers)

            #clip part
            for layer in checkedLayers  :
                out = None
                # clip vector layer (if displayed and checked)
                if layer.type() == QgsMapLayer.VectorLayer and \
                   layer != selection and self.dlg.checkVector.isChecked():
                    self._clipVector(layer, selection)

                # clip raster layer (if displayed and checked)
                if layer.type() == QgsMapLayer.RasterLayer and \
                   self.dlg.checkRaster.isChecked():
                    self._clipRaster(layer, selection)

                # Update progression
                time.sleep(1)
                self.progression += 1
                self.progress.setValue(self.progression)

            iface.messageBar().clearWidgets()

            # Display errors
            if len(self.multi_support_error) != 0:
                self._showBarError(self.multi_support_error)

            if len(self.multi_support_error_processing) != 0:
                self._showBarError(self.multi_support_error_processing)
